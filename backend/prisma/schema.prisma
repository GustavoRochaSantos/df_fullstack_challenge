// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(uuid())
  email    String  @unique
  name     String  @unique
  fullName String
  password String
  photo    String?

  changedByUser String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  isDeleted     Boolean   @default(false)
  isActive      Boolean   @default(true)

  posts       Post[]
  PostLike    PostLike[]
  PostComment PostComment[]
  PostRepost  PostRepost[]
  PostView    PostView[]

  @@map("user")
}

model Post {
  id       String  @id @default(uuid())
  text     String  @db.LongText()
  photo    String?
  comments Int     @default(0)
  likes    Int     @default(0)
  reposts  Int     @default(0)
  views    Int     @default(0)

  changedByUser String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  isDeleted     Boolean   @default(false)
  isActive      Boolean   @default(true)

  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  PostLike    PostLike[]
  PostComment PostComment[]
  PostRepost  PostRepost[]
  PostView    PostView[]

  @@map("post")
}

model PostLike {
  post          Post      @relation(fields: [postId], references: [id])
  postId        String
  likedUser     User      @relation(fields: [likedByUserId], references: [id])
  likedByUserId String
  createdAt     DateTime  @default(now())
  deletedAt     DateTime?
  isDeleted     Boolean   @default(false)
  isActive      Boolean   @default(true)

  @@id([postId, likedByUserId])
  @@unique([postId, likedByUserId])
  @@map("post-like")
}

model PostRepost {
  post             Post      @relation(fields: [postId], references: [id])
  postId           String
  repostedUser     User      @relation(fields: [repostedByUserId], references: [id])
  repostedByUserId String
  createdAt        DateTime  @default(now())
  deletedAt        DateTime?
  isDeleted        Boolean   @default(false)
  isActive         Boolean   @default(true)

  @@id([postId, repostedByUserId])
  @@unique([postId, repostedByUserId])
  @@map("post-repost")
}

model PostView {
  post           Post      @relation(fields: [postId], references: [id])
  postId         String
  viewedUser     User      @relation(fields: [viewedByUserId], references: [id])
  viewedByUserId String
  createdAt      DateTime  @default(now())
  deletedAt      DateTime?
  isDeleted      Boolean   @default(false)
  isActive       Boolean   @default(true)

  @@id([postId, viewedByUserId])
  @@unique([postId, viewedByUserId])
  @@map("post-view")
}

model PostComment {
  id   String @id @default(uuid())
  text String

  changedByUser String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  isDeleted     Boolean   @default(false)
  isActive      Boolean   @default(true)

  post            Post         @relation(fields: [postId], references: [id])
  postId          String
  replayCommentId String?
  replayComment   PostComment? @relation("postReplay", fields: [replayCommentId], references: [id])

  User        User?         @relation(fields: [userId], references: [id])
  userId      String?
  PostComment PostComment[] @relation("postReplay")

  @@map("post-comment")
}
